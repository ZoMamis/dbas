image: docker

stages:
  - build
  - test
  - build-images
  - analysis
  - deploy

.job-template: &add-services
  services:
    - name: $CI_REGISTRY/cn-tsn/project/dbas/dbas/db:testing
      alias: db
    - name: hhucn/dbas-search:develop
      alias: search
  image: $CI_REGISTRY/cn-tsn/project/dbas/dbas:experimental
  variables:
    DB_HOST: db
    DB_PORT: "5432"
    DB_USER: "postgres"
    DB_PW: "DXxCNtfnt!MOo!f8LY1!P%sw3KGzt@s!"

    # for search
    DB_NAME: discussion
    SEARCH_PORT: 5000
    DBAS_PROTOCOL: http
    SEARCH_NAME: search

    AUTHN_SECRET: "89#s3cr3t_15"
    URL: "https://dbas.cs.uni-duesseldorf.de"
  before_script:
    - alembic upgrade head && pserve development.ini --reload &

# ------------------------------------------------------------------------------
# Job definitions

build_test_images:
  stage: build
  tags:
    - 40c
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE --pull .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:experimental
    - docker push $CI_REGISTRY_IMAGE:experimental
    # Build database
    - docker build -t $CI_REGISTRY_IMAGE/db --pull docker/db
    - docker tag $CI_REGISTRY_IMAGE/db $CI_REGISTRY_IMAGE/db:testing
    - docker push $CI_REGISTRY_IMAGE/db:testing

build_frontend_test_image:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - cd frontendtest
    - docker build -t $CI_REGISTRY_IMAGE/frontendtest --pull .
    - docker push $CI_REGISTRY_IMAGE/frontendtest

flake8:
  stage: test
  script:
    - apk add --no-cache python3 && python3 -m ensurepip
    - pip3 install --quiet flake8
    - flake8 .
  allow_failure: true
  when: always

jshint:
  stage: test
  script:
    - apk add --no-cache yarn bash
    - yarn global add jshint
    - bash -c "jshint ./dbas/static/js/{main,ajax,discussion,review,d3}/*.js"
    - bash -c "jshint ./admin/static/js/main/*.js"
    - bash -c "jshint ./websocket/static/js/*.js"
  allow_failure: true

unit:
  <<: *add-services
  stage: test
  script:
    - nosetests --with-coverage --cover-package=dbas --cover-package=graph --cover-package=admin --cover-package=api --cover-xml -w . api dbas graph admin
  coverage: '/^TOTAL\s*\d+\s*\d+\s*(\d+\%)\s*$/'
  artifacts:
    paths:
      - coverage.xml
    expire_in: 10 mins

sonar:
  image: hhucn/sonar-scanner
  stage: analysis
  script:
    - sonar-scanner -D sonar.host.url=https://sonarqube.cs.uni-duesseldorf.de -D sonar.login=$SONARQUBE_LOGIN -D sonar.projectKey=$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME -D sonar.projectName=$CI_PROJECT_NAME -D sonar.projectVersion=1.10.3 -D sonar.sources=. -D sonar.python.coverage.reportPath=coverage.xml
  only:
    - development
  allow_failure: true
  when: always

sast:
  stage: analysis
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
  artifacts:
    paths: [gl-sast-report.json]
  only:
    - development
  when: always

dependency_scanning:
  stage: analysis
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  tags:
    - 40c
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]
  when: always
  only:
    - development

build_production_images:
  stage: build-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
    # Build and deploy database
    - docker build -t $CI_REGISTRY_IMAGE/db --pull docker/db
    - docker push $CI_REGISTRY_IMAGE/db
    # Build and deploy docs image
    - docker build -t $CI_REGISTRY_IMAGE/docs -f Dockerfile.docs --pull .
    - docker push $CI_REGISTRY_IMAGE/docs
  only:
    - master

build_dev_images:
  stage: build-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:development
    - docker push $CI_REGISTRY_IMAGE:development
    # Build and deploy database
    - docker build -t $CI_REGISTRY_IMAGE/db --pull docker/db
    - docker tag $CI_REGISTRY_IMAGE/db $CI_REGISTRY_IMAGE/db:development
    - docker push $CI_REGISTRY_IMAGE/db:development
    # Build and deploy docs image
    - docker build -t $CI_REGISTRY_IMAGE/docs -f Dockerfile.docs --pull .
    - docker tag $CI_REGISTRY_IMAGE/docs $CI_REGISTRY_IMAGE/docs:development
    - docker push $CI_REGISTRY_IMAGE/docs
  only:
    - development

deploy_production:
  image: alpine
  stage: deploy
  environment: production
  tags:
    - cn
  before_script:
    - apk add --no-cache openssh
    - eval "$(ssh-agent -s)"
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 700 ~/.ssh/
    - ssh-keyscan -H 'docker-int.cn.uni-duesseldorf.de' > ~/.ssh/known_hosts
  script:
    - ssh root@docker-int.cn.uni-duesseldorf.de
  only:
    - master