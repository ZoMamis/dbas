image: docker

stages:
  - build
  - test
  - deploy
  - cleanup

# Start Docker containers and wait some time to seed the database
.job-template: &run-server
  before_script:
    - docker run -d --rm --name dbas_db_$CI_JOB_ID dbas_db_$CI_PIPELINE_ID
    - sleep 10
    - docker run -d --rm --name dbas_web_$CI_JOB_ID --link dbas_db_$CI_JOB_ID:db dbas_web_$CI_PIPELINE_ID


# ------------------------------------------------------------------------------
# Job definitions

build_images:
  stage: build
  script:
    - docker build -t dbas_web_$CI_PIPELINE_ID .
    - docker build -t dbas_db_$CI_PIPELINE_ID docker/db

flake8:
  stage: test
  script:
    - apk add --no-cache python3 && python3 -m ensurepip
    - pip3 install --quiet flake8
    - flake8 .
  allow_failure: true

jshint:
  stage: test
  script:
    - apk add --no-cache nodejs bash
    - npm install -g jshint
    - bash -c "jshint ./dbas/static/js/{main,ajax,discussion,review,d3}/*.js"
  allow_failure: true

unit:
  <<: *run-server
  stage: test
  script:
    - docker exec dbas_web_$CI_JOB_ID nosetests --with-coverage --cover-package=dbas --cover-package=api --cover-package=graph --cover-package=export --cover-package=admin --with-timer -w . dbas graph admin api export
    - docker stop dbas_web_$CI_JOB_ID dbas_db_$CI_JOB_ID

acceptance:
  <<: *run-server
  stage: test
  script:
    - docker exec dbas_web_$CI_JOB_ID nosetests --with-timer --timer-ok 10 --process-timeout=120 tests/test_frontend
    - docker stop dbas_web_$CI_JOB_ID dbas_db_$CI_JOB_ID

deploy_image:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
  only:
    - master

deploy_dev_image:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:development
    - docker push $CI_REGISTRY_IMAGE:development
  only:
    - development

cleanup_images:
  stage: cleanup
  script:
    - docker rmi dbas_web_$CI_PIPELINE_ID dbas_db_$CI_PIPELINE_ID
  when: always
