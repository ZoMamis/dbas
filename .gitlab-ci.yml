image: docker

stages:
  - build
  - test
  - deploy
  - cleanup

.job-template: &add-services
  services:
    - name: hhucn/dbas-database
      alias: db
    - name: $CI_REGISTRY/cn-tsn/project/dbas/dbas:experimental
      alias: dbas_container

# ------------------------------------------------------------------------------
# Job definitions

build_test_image:
  stage: build
  tags:
    - 10c
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:experimental
    - docker push $CI_REGISTRY_IMAGE:experimental

flake8:
  stage: test
  script:
    - apk add --no-cache python3 && python3 -m ensurepip
    - pip3 install --quiet flake8
    - flake8 .
  allow_failure: true

jshint:
  stage: test
  script:
    - apk add --no-cache yarn bash
    - yarn global add jshint
    - bash -c "jshint ./dbas/static/js/{main,ajax,discussion,review,d3}/*.js"
    - bash -c "jshint ./admin/static/js/main/*.js"
    - bash -c "jshint ./webhook/static/js/*.js"
  allow_failure: true

frontend:
  <<: *add-services
  stage: test
  tags:
    - 10c
  script:
    - docker exec dbas_container nosetests --with-timer --timer-ok 10 --process-timeout=120 tests/test_frontend

unit:
  <<: *add-services
  stage: test
  tags:
    - 10c
  script:
    - docker exec dbas_container nosetests --with-coverage --cover-package=dbas --cover-package=api --cover-package=graph --cover-package=export --cover-package=admin --cover-xml --with-timer -w . dbas graph admin api export
    - docker cp dbas_container:/dbas/coverage.xml .
  coverage: '/^TOTAL\s*\d+\s*\d+\s*(\d+\%)\s*$/'
  artifacts:
    paths:
      - coverage.xml
    expire_in: 10 mins

sonar:
  image: hhucn/sonar-scanner
  stage: deploy
  script:
    - sonar-scanner -D sonar.host.url=https://sonarqube.cs.uni-duesseldorf.de -D sonar.login=$SONARQUBE_LOGIN -D sonar.projectKey=$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME -D sonar.projectName=$CI_PROJECT_NAME -D sonar.projectVersion=1.4 -D sonar.sources=. -D sonar.python.coverage.reportPath=coverage.xml
  only:
    - development
  when: always

deploy_image:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
    # Build docs
    - docker build -t $CI_REGISTRY_IMAGE -f Dockerfile.docs .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:docs
    - docker push $CI_REGISTRY_IMAGE:docs
  only:
    - master

deploy_dev_image:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:development
    - docker push $CI_REGISTRY_IMAGE:development
  only:
    - development

#cleanup_images:
#  stage: cleanup
#  tags:
#    - 10c
#  script:
#    - docker rmi -f dbas_web_$CI_PIPELINE_ID
#  when: always
