image: docker

services:
  - docker:stable-dind

stages:
  - build
  - test
  - build-images
  - analysis
  - deploy

# to cache both npm modules and Cypress binary we use environment variables
# to point at the folders we can list as paths in "cache" job settings
variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

# cache using branch name
# https://gitlab.com/help/ci/caching/index.md
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm
    - cache/Cypress
    - node_modules


.job-template: &add-services
  services:
    - name: $CI_REGISTRY/cn-tsn/project/dbas/dbas/db:testing
      alias: db
  image: $CI_REGISTRY/cn-tsn/project/dbas/dbas:experimental
  variables:
    AUTHN_SECRET: 89#s3cr3t_15
    DB_HOST: db
    DB_PORT: 5432
    DB_USER: postgres
    DB_PW: DXxCNtfnt!MOo!f8LY1!P%sw3KGzt@s!
    URL: https://dbas.cs.uni-duesseldorf.de
    KEY_PATH: devkey.pem
    PUBKEY_PATH: devpublic.pem
  before_script:
    - alembic upgrade head && pserve development.ini --reload &

# ------------------------------------------------------------------------------
# Job definitions

build_test_image:
  stage: build
  tags:
    - ht
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:experimental --pull .
    - docker push $CI_REGISTRY_IMAGE:experimental

build_test_db_image:
  stage: build
  tags:
    - ht
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/db:testing --pull docker/db
    - docker push $CI_REGISTRY_IMAGE/db:testing

build_cypress:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/frontendtest --pull frontendtest/
    - docker push $CI_REGISTRY_IMAGE/frontendtest


cypress:
  stage: test
  image: docker:dind
  variables:
    AUTHN_SECRET: '89#s3cr3t_15'
    DB_HOST: db_$CI_JOB_ID
    DB_PORT: '5432'
    DB_USER: 'postgres'
    DB_PW: 'DXxCNtfnt!MOo!f8LY1!Psw3KGzt@s!'
    DB_NAME: 'discussion'
    KEY_PATH: 'devkey.pem'
    PUBKEY_PATH: 'devpublic.pem'
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY/cn-tsn/project/dbas/dbas/db:testing
    - docker pull $CI_REGISTRY/cn-tsn/project/dbas/dbas:experimental
    - docker pull $CI_REGISTRY_IMAGE/frontendtest
    - docker network create -d bridge dbas_$CI_JOB_ID
    - docker run -d --name db_$CI_JOB_ID --net=dbas_$CI_JOB_ID $CI_REGISTRY_IMAGE/db:testing
    - sleep 8
    - docker run -d --name web_$CI_JOB_ID --net=dbas_$CI_JOB_ID -e AUTHN_SECRET=$AUTHN_SECRET -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_USER=$DB_USER -e DB_PW=$DB_PW -e DB_NAME=$DB_NAME -e KEY_PATH=$KEY_PATH -e PUBKEY_PATH=$PUBKEY_PATH  $CI_REGISTRY_IMAGE:experimental
    - sleep 5
    - docker run -di --name frontendtest_$CI_JOB_ID --net=dbas_$CI_JOB_ID $CI_REGISTRY_IMAGE/frontendtest
  script:
    - docker exec frontendtest_$CI_JOB_ID bash -c "node_modules/.bin/cypress run --env WEB_HOST=web_$CI_JOB_ID"
  after_script:
    - mkdir cypress_artifacts/
    - docker cp frontendtest_$CI_JOB_ID:/cypress cypress_artifacts/
    - docker kill db_$CI_JOB_ID web_$CI_JOB_ID frontendtest_$CI_JOB_ID || true
    - docker network rm dbas_$CI_JOB_ID || true
  artifacts:
    paths:
      - cypress_artifacts/
    expire_in: 1 day
    when: on_failure




flake8:
  stage: test
  script:
    - apk add --no-cache python3 && python3 -m ensurepip
    - pip3 install --quiet flake8
    - pip3 show flake8
    - flake8 .
  allow_failure: true
  when: always

jshint:
  stage: test
  script:
    - apk add --no-cache yarn bash
    - yarn global add jshint
    - bash -c "jshint ./dbas/static/js/{main,ajax,discussion,review,d3}/*.js"
    - bash -c "jshint ./admin/static/js/main/*.js"
    - bash -c "jshint ./websocket/static/js/*.js"
  allow_failure: true

unit:
  <<: *add-services
  stage: test
  script:
    - nosetests --with-coverage --cover-package=dbas --cover-package=graph --cover-package=admin --cover-package=api --cover-xml -w . api dbas graph admin
  coverage: '/^TOTAL\s*\d+\s*\d+\s*(\d+\%)\s*$/'
  artifacts:
    paths:
      - coverage.xml
    expire_in: 1 hrs

sonar:
  image: hhucn/sonar-scanner
  stage: analysis
  script:
    - sonar-scanner -D sonar.host.url=https://sonarqube.cs.uni-duesseldorf.de -D sonar.login=$SONARQUBE_LOGIN -D sonar.projectKey=$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME -D sonar.projectName=$CI_PROJECT_NAME -D sonar.projectVersion=1.23.0 -D sonar.sources=. -D sonar.python.coverage.reportPath=coverage.xml
  only:
    - development
  allow_failure: true
  when: always


include:
  - template: SAST.gitlab-ci.yml

sast:
  stage: analysis
  allow_failure: true
  only:
    - development
  when: always

# -----------------------------------------------------------------------------

build_production_image:
  stage: build-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
    # Build production docs for live version
    - docker build -t $CI_REGISTRY_IMAGE/docs -f Dockerfile.docs --pull .
    - docker push $CI_REGISTRY_IMAGE/docs
  only:
    - master

build_production_db_image:
  stage: build-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/db --pull docker/db
    - docker push $CI_REGISTRY_IMAGE/db
  only:
    - master

# -----------------------------------------------------------------------------

build_dev_image:
  stage: build-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:development .
    - docker push $CI_REGISTRY_IMAGE:development
    # Build docs image for development
    - docker build -t $CI_REGISTRY_IMAGE/docs:development -f Dockerfile.docs --pull .
    - docker push $CI_REGISTRY_IMAGE/docs
  only:
    - development

build_db_dev_image:
  stage: build-images
  script:
    # Build and deploy database
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/db:development --pull docker/db
    - docker push $CI_REGISTRY_IMAGE/db:development
  only:
    - development

# -----------------------------------------------------------------------------

deploy_production:
  image: alpine
  stage: deploy
  environment: production
  dependencies: []
  tags:
    - cn
  before_script:
    - apk add --no-cache openssh
    - eval "$(ssh-agent -s)"
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 700 ~/.ssh/
    - ssh-keyscan -H 'docker-int.cn.uni-duesseldorf.de' > ~/.ssh/known_hosts
  script:
    - ssh root@docker-int.cn.uni-duesseldorf.de "$DEPLOY_YMLS"
  only:
    - master
