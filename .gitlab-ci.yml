image: docker

services:
  - docker:stable-dind

stages:
  - build
  - test
  - build-images
  - analysis
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - /dbas/dbas/static/node_modules
    - /root/.cache/Cypress/

.job-template: &add-services
  services:
    - name: $CI_REGISTRY/cn-tsn/project/dbas/dbas/db:testing
      alias: db
  image: $CI_REGISTRY/cn-tsn/project/dbas/dbas:experimental
  variables:
    AUTHN_SECRET: 89#s3cr3t_15
    DB_HOST: db
    DB_PORT: 5432
    DB_USER: postgres
    DB_PW: DXxCNtfnt!MOo!f8LY1!P%sw3KGzt@s!
    POSTGRES_PASSWORD: DXxCNtfnt!MOo!f8LY1!P%sw3KGzt@s!
    URL: https://dbas.cs.uni-duesseldorf.de
    KEY_PATH: devkey.pem
    PUBKEY_PATH: devpublic.pem
  before_script:
    - alembic upgrade head && pserve development.ini --reload &

# ------------------------------------------------------------------------------
# Job definitions

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID               # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'master'      # Execute jobs when a new commit is pushed to master branch

build_test_image:
  stage: build
  tags:
    - ht
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:experimental --pull .
    - docker push $CI_REGISTRY_IMAGE:experimental

build_test_db_image:
  stage: build
  tags:
    - ht
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/db:testing --pull docker/db
    - docker push $CI_REGISTRY_IMAGE/db:testing

flake8:
  stage: test
  script:
    - apk add --no-cache python3 && python3 -m ensurepip
    - pip3 install --quiet flake8
    - pip3 show flake8
    - flake8 .
  allow_failure: true
  when: always

jshint:
  stage: test
  script:
    - apk add --no-cache yarn bash
    - yarn global add jshint
    - bash -c "jshint ./dbas/static/js/{main,ajax,discussion,review,d3}/*.js"
    - bash -c "jshint ./admin/static/js/main/*.js"
    - bash -c "jshint ./websocket/static/js/*.js"
  allow_failure: true

unit:
  <<: *add-services
  stage: test
  script:
    - nosetests --with-coverage --cover-package=dbas --cover-package=graph --cover-package=admin --cover-package=api --cover-xml -w . api dbas graph admin
  coverage: '/^TOTAL\s*\d+\s*\d+\s*(\d+\%)\s*$/'
  artifacts:
    paths:
      - coverage.xml
    expire_in: 1 hrs

cypress:
  <<: *add-services
  stage: test
  tags:
    - ht
  before_script:
    - make dev-server &
    - sed -i 's/deb.debian.org/mirror.cs.uni-duesseldorf.de/g' /etc/apt/sources.list
    - sed -i 's/security.debian.org/mirror.cs.uni-duesseldorf.de/g' /etc/apt/sources.list
    - apt update
    - apt -yqq install libgtk2.0-0 libgtk-3-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
    - yarn install --dev
    - cd frontendtest
  script:
    - ../dbas/static/node_modules/.bin/cypress run --env WEB_HOST=localhost
  artifacts:
    paths:
      - frontendtest/cypress/
    expire_in: 1 day
    when: on_failure

sonar:
  image: hhucn/sonar-scanner
  stage: analysis
  script:
    - sonar-scanner -D sonar.host.url=https://sonarqube.cs.uni-duesseldorf.de -D sonar.login=$SONARQUBE_LOGIN -D sonar.projectKey=$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME -D sonar.projectName=$CI_PROJECT_NAME -D sonar.projectVersion=1.26.0 -D sonar.sources=. -D sonar.python.coverage.reportPath=coverage.xml
  only:
    - development
  allow_failure: true
  when: always


include:
  - template: SAST.gitlab-ci.yml

sast:
  stage: analysis
  allow_failure: true
  only:
    - development
  when: always

# -----------------------------------------------------------------------------

build_production_image:
  stage: build-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
    # Build production docs for live version
    - docker build -t $CI_REGISTRY_IMAGE/docs -f Dockerfile.docs --pull .
    - docker push $CI_REGISTRY_IMAGE/docs
  only:
    - master

build_production_db_image:
  stage: build-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/db --pull docker/db
    - docker push $CI_REGISTRY_IMAGE/db
  only:
    - master

# -----------------------------------------------------------------------------

build_dev_image:
  stage: build-images
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:development .
    - docker push $CI_REGISTRY_IMAGE:development
    # Build docs image for development
    - docker build -t $CI_REGISTRY_IMAGE/docs:development -f Dockerfile.docs --pull .
    - docker push $CI_REGISTRY_IMAGE/docs
  only:
    - development

build_db_dev_image:
  stage: build-images
  script:
    # Build and deploy database
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/db:development --pull docker/db
    - docker push $CI_REGISTRY_IMAGE/db:development
  only:
    - development

# -----------------------------------------------------------------------------

deploy_production:
  image: alpine
  stage: deploy
  environment: production
  dependencies: []
  tags:
    - cn
  before_script:
    - apk add --no-cache openssh
    - eval "$(ssh-agent -s)"
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - chmod 700 ~/.ssh/
    - ssh-keyscan -H 'docker-int.cn.uni-duesseldorf.de' > ~/.ssh/known_hosts
  script:
    - ssh root@docker-int.cn.uni-duesseldorf.de "$DEPLOY_YMLS"
  only:
    - master
